"use client";

import { useState, useEffect } from "react";
import {
  BulkScreenshotPreset,
  BulkScreenshotItem,
  PresetCategories,
  PresetSubcategories,
} from "@/lib/types";
import { createBulkPreset, updateBulkPreset } from "@/lib/presetService";
import Notification, { NotificationType } from "./Notification";

interface BulkPresetFormProps {
  preset?: BulkScreenshotPreset;
  onSave: () => void;
  onCancel: () => void;
}

// New interface for our grouped items
interface CategoryGroup {
  url: string;
  category: string;
  selectors: { [subcategory: string]: string };
}

export default function BulkPresetForm({
  preset,
  onSave,
  onCancel,
}: BulkPresetFormProps) {
  const [name, setName] = useState(preset?.name || "");
  const [viewportWidth, setViewportWidth] = useState(
    preset?.viewportWidth || 1280
  );
  const [viewportHeight, setViewportHeight] = useState(
    preset?.viewportHeight || 800
  );
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [notification, setNotification] = useState<{
    message: string;
    type: NotificationType;
  } | null>(null);
  
  // New state for category groups
  const [categoryGroups, setCategoryGroups] = useState<CategoryGroup[]>([]);

  // Initialize form from preset if provided
  useEffect(() => {
    if (preset?.items?.length) {
      // Group items by URL and category
      const groups: { [key: string]: CategoryGroup } = {};
      
      preset.items.forEach(item => {
        if (!item.category) return;
        
        const key = `${item.url}_${item.category}`;
        if (!groups[key]) {
          groups[key] = {
            url: item.url,
            category: item.category,
            selectors: {}
          };
        }
        
        if (item.subcategory) {
          groups[key].selectors[item.subcategory] = item.selector;
        }
      });
      
      setCategoryGroups(Object.values(groups));
    } else {
      // Start with one empty group
      setCategoryGroups([{ url: "", category: "", selectors: {} }]);
    }
  }, [preset]);

  // Add a new category group
  const addCategoryGroup = () => {
    setCategoryGroups([...categoryGroups, { url: "", category: "", selectors: {} }]);
  };

  // Remove a category group
  const removeCategoryGroup = (index: number) => {
    const newGroups = [...categoryGroups];
    newGroups.splice(index, 1);
    setCategoryGroups(newGroups);
  };

  // Update a category group's URL or category
  const updateCategoryGroup = (index: number, field: 'url' | 'category', value: string) => {
    const newGroups = [...categoryGroups];
    
    // If changing category, reset selectors since subcategories will change
    if (field === 'category' && newGroups[index].category !== value) {
      newGroups[index] = { 
        ...newGroups[index], 
        category: value, 
        selectors: {} 
      };
    } else {
      newGroups[index] = { ...newGroups[index], [field]: value };
    }
    
    setCategoryGroups(newGroups);
  };

  // Update a selector for a specific subcategory
  const updateSelector = (groupIndex: number, subcategory: string, selector: string) => {
    const newGroups = [...categoryGroups];
    newGroups[groupIndex] = { 
      ...newGroups[groupIndex], 
      selectors: { 
        ...newGroups[groupIndex].selectors,
        [subcategory]: selector 
      } 
    };
    setCategoryGroups(newGroups);
  };

  // Convert category groups to bulk screenshot items for saving
  const groupsToBulkItems = (): BulkScreenshotItem[] => {
    const items: BulkScreenshotItem[] = [];
    
    categoryGroups.forEach(group => {
      if (!group.url || !group.category) return;
      
      // Get subcategories for this category
      const subcategories = PresetSubcategories[group.category] || [];
      
      subcategories.forEach(subcategory => {
        const selector = group.selectors[subcategory] || '';
        if (selector) {
          items.push({
            url: group.url,
            selector,
            category: group.category,
            subcategory
          });
        }
      });
    });
    
    return items;
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    // Validate form
    if (!name) {
      setError("Preset name is required");
      setIsLoading(false);
      return;
    }

    if (categoryGroups.length === 0) {
      setError("At least one URL is required");
      setIsLoading(false);
      return;
    }

    // Validate each group
    for (let i = 0; i < categoryGroups.length; i++) {
      const group = categoryGroups[i];
      if (!group.url) {
        setError(`URL is required for Category Group #${i + 1}`);
        setIsLoading(false);
        return;
      }
      
      if (!group.category) {
        setError(`Category is required for Group #${i + 1}`);
        setIsLoading(false);
        return;
      }

      // Check if at least one selector is defined
      const hasSelectors = Object.values(group.selectors).some(selector => !!selector);
      if (!hasSelectors) {
        setError(`At least one selector is required for Group #${i + 1}`);
        setIsLoading(false);
        return;
      }
    }

    // Create or update preset
    try {
      const items = groupsToBulkItems();
      const bulkPreset: BulkScreenshotPreset = {
        name,
        items,
        viewportWidth,
        viewportHeight,
      };

      if (preset?.id) {
        bulkPreset.id = preset.id;
        await updateBulkPreset(bulkPreset);
        setNotification({
          message: "Bulk screenshot preset updated successfully!",
          type: "success",
        });
      } else {
        await createBulkPreset(bulkPreset);
        setNotification({
          message: "Bulk screenshot preset created successfully!",
          type: "success",
        });
      }

      // Call the onSave callback
      onSave();
    } catch (error) {
      console.error("Error saving bulk preset:", error);
      setError(
        error instanceof Error
          ? error.message
          : "Failed to save preset. Please try again."
      );
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6">
      {notification && (
        <Notification
          message={notification.message}
          type={notification.type}
          onClose={() => setNotification(null)}
        />
      )}

      <div className="flex justify-between items-center mb-6">
        <h2 className="text-lg font-semibold">
          {preset?.id
            ? "Edit Bulk Screenshot Preset"
            : "Create Bulk Screenshot Preset"}
        </h2>
      </div>

      <form onSubmit={handleSubmit}>
        {error && (
          <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-900 rounded-lg p-4 mb-6">
            <p className="text-red-700 dark:text-red-400">{error}</p>
          </div>
        )}

        <div className="mb-4">
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Preset Name *
          </label>
          <input
            type="text"
            id="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-900 dark:text-white"
            placeholder="My Bulk Screenshot Preset"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Viewport Size
          </label>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label
                htmlFor="viewportWidth"
                className="block text-xs text-gray-500 dark:text-gray-400 mb-1"
              >
                Width (px)
              </label>
              <input
                type="number"
                id="viewportWidth"
                value={viewportWidth}
                onChange={(e) => setViewportWidth(Number(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-900 dark:text-white"
                min="320"
                max="3840"
                required
              />
            </div>
            <div>
              <label
                htmlFor="viewportHeight"
                className="block text-xs text-gray-500 dark:text-gray-400 mb-1"
              >
                Height (px)
              </label>
              <input
                type="number"
                id="viewportHeight"
                value={viewportHeight}
                onChange={(e) => setViewportHeight(Number(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-900 dark:text-white"
                min="320"
                max="2160"
                required
              />
            </div>
          </div>
        </div>

        <div className="mb-4">
          <div className="flex justify-between items-center mb-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Category Groups *
            </label>
            <button
              type="button"
              onClick={addCategoryGroup}
              className="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
            >
              <i className="fa-solid fa-plus mr-1"></i> Add Category
            </button>
          </div>

          {categoryGroups.map((group, groupIndex) => (
            <div
              key={groupIndex}
              className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg mb-4"
            >
              <div className="flex justify-between items-center mb-2">
                <h3 className="text-sm font-medium">Category Group #{groupIndex + 1}</h3>
                <button
                  type="button"
                  onClick={() => removeCategoryGroup(groupIndex)}
                  disabled={categoryGroups.length === 1}
                  className={`text-xs text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 ${
                    categoryGroups.length === 1 ? "opacity-50 cursor-not-allowed" : ""
                  }`}
                >
                  <i className="fa-solid fa-trash-can mr-1"></i> Remove
                </button>
              </div>

              <div className="grid grid-cols-1 gap-4 mb-4">
                <div>
                  <label
                    htmlFor={`url-${groupIndex}`}
                    className="block text-xs text-gray-500 dark:text-gray-400 mb-1"
                  >
                    URL for all ads in this category *
                  </label>
                  <input
                    type="url"
                    id={`url-${groupIndex}`}
                    value={group.url}
                    onChange={(e) => updateCategoryGroup(groupIndex, "url", e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-900 dark:text-white"
                    placeholder="https://example.com"
                    required
                  />
                </div>
                <div>
                  <label
                    htmlFor={`category-${groupIndex}`}
                    className="block text-xs text-gray-500 dark:text-gray-400 mb-1"
                  >
                    Category *
                  </label>
                  <select
                    id={`category-${groupIndex}`}
                    value={group.category}
                    onChange={(e) => updateCategoryGroup(groupIndex, "category", e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-900 dark:text-white"
                    required
                  >
                    <option value="">Select category</option>
                    {Object.values(PresetCategories).map((category) => (
                      <option key={category} value={category}>
                        {category}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              {group.category && PresetSubcategories[group.category]?.length > 0 && (
                <div>
                  <h4 className="text-sm font-medium mb-2">Ad Selectors</h4>
                  <p className="text-xs text-gray-500 dark:text-gray-400 mb-3">
                    Enter CSS selectors for each ad type you want to capture. Leave empty to skip.
                  </p>
                  
                  <div className="space-y-3">
                    {PresetSubcategories[group.category].map((subcategory) => (
                      <div key={subcategory} className="flex flex-col">
                        <label
                          htmlFor={`selector-${groupIndex}-${subcategory}`}
                          className="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1"
                        >
                          {subcategory}
                        </label>
                        <input
                          type="text"
                          id={`selector-${groupIndex}-${subcategory}`}
                          value={group.selectors[subcategory] || ''}
                          onChange={(e) => updateSelector(groupIndex, subcategory, e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-900 dark:text-white"
                          placeholder="#main-content .ad-container"
                        />
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>

        <div className="flex justify-end mt-6 space-x-2">
          <button
            type="button"
            onClick={onCancel}
            className="px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm rounded-md hover:bg-gray-50 dark:hover:bg-gray-700"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={isLoading}
            className="px-4 py-2 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isLoading ? (
              <>
                <i className="fa-solid fa-spinner fa-spin mr-2"></i>
                {preset?.id ? "Updating..." : "Creating..."}
              </>
            ) : preset?.id ? (
              "Update Preset"
            ) : (
              "Create Preset"
            )}
          </button>
        </div>
      </form>
    </div>
  );
}
